  typ specifers
  [num]
  [bol]
  [void]
  [typ $typ]
  [lam $typA $typB]
  [vec $typ $int]
  [tup $typA $typB ..]

typs
  $int = integer > 0
  $void = [void]
  $num = [num]
  $bol = [bol]
  $vec1 = $num
  $vec2 = [vec $num 2]
  $vec3 = [vec $num 3]

toks
  [typ $typ]
  [nat ..]
  [val $typ $val]
  [var $typ $var]
  [var $typ $var $val]
  [def $typ $var]
  [par $typ $vars]
combos
  [..]
  [nat ..]
  [@]
  [@ $typ]
    [typ $typ]
    [val $typ $val]
    [val $num $int]
    [var $typ $var]
    [var $typ $var $val]
    [var $num $var $int]
    [def $typ $var]
    [par $typ $vars]
  [@ $typ $var]
    [var $typ $var]
    [var $typ $var $val]
    [var $num $var $int]
    [def $typ $var]
  [@ $typ $val]
    [val $typ $val]
    [val $num $int]
    [var $typ $var $val]
    [var $num $var $int]
  [@ $num $int]
    [val $num $int]
    [var $num $var $int]
  [typ $typ]
  [val $typ $val]
    [val $num $int]
  [val $num $int]
  [var $typ $var]
    [var $typ $var]
    [var $typ $var $val]
    [var $num $var $int]
  [var $typ $var $val]
    [var $typ $var $val]
    [var $num $var $int]
  [def $typ $var]
  [par $typ $vars]

$shortcuts
  $typ
  $typA
  $typB

  $allnum
  $allnumA
  $allnumB

  $allbol
  $allbolA
  $allbolB

  $cmplx
  $cmplxA
  $cmplxB

  $var
  $vars
  $val

$
  ['$int' $int]
  ['$ints' [$intA $intB ..]]
  ['$var' [varidx $refidxA $refidxB ..] $wrd $scp]
  ['$vars' [$varA $varB ..]]
  ['$val' [varidx $refidxA $refidxB ..] ['$srcidxA' '$srcidxB' ..]  $val]
  ['$vals' [$valA $valB ..]]

funs
  abs $num
  abs $nums
  sum $num+
  sqr $num
  sqrt $num
  not $allbol
  mod $num $num
  xor $allbol $allbol
  vec $val+
  lam $vars $val
  var $scp $wrd $vidx
  num $num
  bol $bol
  conop $bol $val $val
  neg $allnum
  pow ['vec' $num $num] ['vec' $num $num]
  mul ['vec' $num $num] ['vec' $num $num]
  div ['vec' $num $num] ['vec' $num $num]
  scal $allnum $num
  addnum $allnum $allnum
  subnum $allnum $allnum

allevals
  var $wrd
    -> [var $void $var]
  num $wrd
    -> [val $num $val]
  ret [@ $typ $val]
    -> [typ $void]
  stat [@]
    vec [@ [vec $typ $int]]
  absnum [@ $num $val]
  absvec [@ [vec $num $int] $val]
  not [@ $allbol $val]
  mod [@ $vec2 $val]
  xor [@ [vec $allbol 2] $val]
    -> [@ $allbol $val]
  crossvec [@ [vec $allnum 2] $val]
    -> [@ $allnum $val]
  crosstup [@ [tup $allnumA $allnumB] $val]
    [@ $allnum $val]
  donat [nat ..] [@]
  dolam [@ [lam $typA $typB] $val] [@ $typA $val]
    -> [val $typB $val]
  newvec [typ $typ] [@ $num $int]
    -> [typ [vec $typ $int]]
  newdef [typ $typA] [var $typB $var]
    -> [def $typA $var]
  lamtyp [typ $typA] [typ $typB]
    -> [typ [lam $typA $typB]]
  typcoerce [@ $typA $val] [typ $typB]
    -> [@ $typB $val]
  deflam [def $typA $var] [@ $typB $val]
    -> [val [lam $typA $typB] $val]
  parlam [par $typA $vars] [@ $typB $val]
    -> [val [lam $typA $typB] $val]
  setlam [def $typA $var] [@ [lam $typB $typA] $val]
    -> [typ $void]
  cmpnum [@ $allnumA $val] [@ $allnumB $val]
    -> [@ $allnum $val]
  cmpbol [@ $allbolA $val] [@ $allbolB $val]
    -> [@ $allnum $val]
  tupvoid
    -> [typ $void]
  tuppass [@]
    -> [@]
  vectyp [typ $typ] [typ $typ] ..
    -> [typ [vec $typ $int]]
  tuptyp [typ $typA] [typ $typB] ..
    -> [typ [tup $typA $typB ..]]
  vecdef [def $typ $var] [def $typ $var] ..
    -> [par [vec $typ $int] $vars]
  tupdef [def $typA $var] [def $typB $var] ..
    -> [par [tup $typA $typB ..] $vars]
  vecval [@ $typ $val] [@ typ $val] ..
    -> [val [vec $typ $int] $val]
  tupval [@ $typA $val] [@ typB $val] ..
    -> [val [tup $typA $typB ..] $val]
  conop [@ $bol $val] [@ $typ $val] [@ $typ $val]
    -> [val $typ $val]
  scp ..
    -> [val $typ $val]
  settyp [var [typ $typA] $var] [typ $typB]
    -> [typ $typB]
  setvar [var $typ $var] [@ $typ $val]
    -> [@ $typ $val]
  setdef [def $typ $var] [@ $typ $val]
    -> [typ $void]
  idxvectyp [typ [vec $typ $int]] [val $num $int]
    -> [typ $typ]
  idxvecvar [typ [tup $typA $typB ..]] [val $num $int]
    -> [typ $typ]
  idxvecval [var [vec $typ $int] $var $val] [val $num $int]
    -> [var $typ $var $val]
  idxtuptyp [var [tup $typA $typB ..] $var $val] [val $num $int]
    -> [var $typ $var $val]
  idxtupvar [val [vec $typ $int] $val] [val $num $int]
    -> [val $typ $val]
  idxtupval [val [tup $typA $typB ..] $val] [val $num $int]
    -> [val $typ $val]
  pdec [var $num $var $val]
    -> [val $num $val]
  pinc [var $num $var $val]
    -> [val $num $val]
  dec [var $num $var $val]
    -> [val $num $val]
  inc [var $num $var $val]
    -> [val $num $val]
  negnum [@ $allnum $val]
    -> [@ $allnum $val]
  negbol [@ $allbol $val]
    -> [@ $allbol $val]
  posnum [@ $allnum $val]
    -> [@ $allnum $val]
  posbol [@ $allbol $val]
    -> [@ $allbol $val]
  powvec [@ [vec $cmplx 2] $val]
    -> [val $vec2 $val]
  powtup [@ [tup $cmplxA $cmplxB] $val]
    -> [val $vec2 $val]
  mulvec [@ [vec $cmplx 2] $val]
    -> [val $vec2 $val]
  multup [@ [tup $cmplxA $cmplxB] $val]
    -> [val $vec2 $val]
  divvec [@ [vec $cmplx 2] $val]
    -> [val $vec2 $val]
  divtup [@ [tup $cmplxA $cmplxB] $val]
    -> [val $vec2 $val]
  addnum [@ [vec $allnum 2] $val]
  addbol [@ [vec $allbol 2] $val]
  subnum [@ [vec $allnum 2] $val]
  subbol [@ [vec $allbol 2] $val]
  dotvecnum [@ [vec $allnum 2] $val]
  dottupnum [@ [tup $allnumA $allnumB] $val]
  dotvecbol [@ [vec $allbol 2] $val]
  dottupbol [@ [tup $allbolA $allbolB] $val]
  equ [@ [vec $typ 2] $val]
  neq [@ [vec $typ 2] $val]
  gtr [@ $vec2 $val]
  les [@ $vec2 $val]
  leq [@ $vec2 $val]
  geq [@ $vec2 $val]
  sin [@ $cmplx $val]
  cos [@ $cmplx $val]
  tan [@ $cmplx $val]
  csc [@ $cmplx $val]
  sec [@ $cmplx $val]
  cot [@ $cmplx $val]
  asin [@ $cmplx $val]
  acos [@ $cmplx $val]
  atan [@ $cmplx $val]
  acsc [@ $cmplx $val]
  asec [@ $cmplx $val]
  acot [@ $cmplx $val]
  atan2 [@ [vec $cmplx 2] $val]
nats
  void: typ $void
  typ: typ $void
  num: typ $num
  bol: typ $bol
  vec1: typ $num
  vec2: typ $vec2
  vec3: typ $vec3
  return: nat
    ret [@ $typ $val]
      -> [typ $void]
  stat: nat
    stat [@]
  vec: nat
    vec [@ [vec $typ $int]]
  abs: nat
    absnum [@ $num $val]
    absvec [@ [vec $num $int] $val]
  not: nat
    not [@ $allbol $val]
  mod: nat
    mod [@ $vec2 $val]
  xor: nat
    xor [@ [vec $allbol 2] $val]
      -> [@ $allbol $val]
  cross: nat
    crossvec [@ [vec $allnum 2] $val]
      -> [@ $allnum $val]
    crosstup [@ [tup $allnumA $allnumB] $val]
      [@ $allnum $val]
  comp: nat
    donat [nat ..] [@]
    dolam [@ [lam $typA $typB] $val] [@ $typA $val]
    newvec [typ $typ] [@ $num $int]
      -> [typ [vec $typ $int]]
    newdef [typ $typA] [var $typB $var]
      -> [def $typA $var]
    lamtyp [typ $typA] [typ $typB]
      -> [typ [lam $typA $typB]]
    typcoerce [@ $typA $val] [typ $typB]
      -> [@ $typB $val]
    deflam [def $typA $var] [@ $typB $val]
      -> [val [lam $typA $typB] $val]
    parlam [par $typA $vars] [@ $typB $val]
      -> [val [lam $typA $typB] $val]
    setlam [def $typA $var] [@ [lam $typB $typA] $val]
      -> [typ $void]
    cmpnum [@ $allnumA $val] [@ $allnumB $val]
      -> [@ $allnum $val]
    cmpbol [@ $allbolA $val] [@ $allbolB $val]
      -> [@ $allnum $val]
  tup: nat
    tupvoid
      -> [typ $void]
    tuppass [@]
      -> [@]
    vectyp [typ $typ] [typ $typ] ..
      -> [typ [vec $typ $int]]
    tuptyp [typ $typA] [typ $typB] ..
      -> [typ [tup $typA $typB ..]]
    vecdef [def $typ $var] [def $typ $var] ..
      -> [par [vec $typ $int] $vars]
    tupdef [def $typA $var] [def $typB $var] ..
      -> [par [tup $typA $typB ..] $vars]
    vecval [@ $typ $val] [@ typ $val] ..
      -> [val [vec $typ $int] $val]
    tupval [@ $typA $val] [@ typB $val] ..
      -> [val [tup $typA $typB ..] $val]
  conop: nat
    conop [@ $bol $val] [@ $typ $val] [@ $typ $val]
      -> [val $typ $val]
  scp: nat
    scp ..
      -> [val $typ $val]
  assign: nat
    settyp [var [typ $typA] $var] [typ $typB]
      -> [typ $typB]
    setvar [var $typ $var] [@ $typ $val]
      -> [@ $typ $val]
    setdef [def $typ $var] [@ $typ $val]
      -> [typ $void]
  idx: nat
    idxvectyp [typ [vec $typ $int]] [val $num $int]
      -> [typ $typ]
    idxvecvar [typ [tup $typA $typB ..]] [val $num $int]
      -> [typ $typ]
    idxvecval [var [vec $typ $int] $var $val] [val $num $int]
      -> [var $typ $var $val]
    idxtuptyp [var [tup $typA $typB ..] $var $val] [val $num $int]
      -> [var $typ $var $val]
    idxtupvar [val [vec $typ $int] $val] [val $num $int]
      -> [val $typ $val]
    idxtupval [val [tup $typA $typB ..] $val] [val $num $int]
      -> [val $typ $val]
  pdec pinc dec inc: nat
    $tok [var $num $var $val]
      -> [val $num $val]
  neg pos: nat
    ($tok)num [@ $allnum $val]
      -> [@ $allnum $val]
    ($tok)bol [@ $allbol $val]
      -> [@ $allbol $val]
  pow mul div: nat
    ($tok)vec [@ [vec $cmplx 2] $val]
      -> [val $vec2 $val]
    ($tok)tup [@ [tup $cmplxA $cmplxB] $val]
      -> [val $vec2 $val]
  add sub: nat
    $tok [@ [vec $allnum 2] $val]
    $tok [@ [vec $allbol 2] $val]
  dot: nat
    dotvecnum [@ [vec $allnum 2] $val]
    dottupnum [@ [tup $allnumA $allnumB] $val]
    dotvecbol [@ [vec $allbol 2] $val]
    dottupbol [@ [tup $allbolA $allbolB] $val]
  equ neq: nat
    $tok [@ [vec $typ 2] $val]
  gtr les leq geq: nat
    $tok [@ $vec2 $val]
  sin cos tan csc sec cot asin acos atan acsc asec acot: nat
    $tok [@ $cmplx $val]
  atan2
    $tok [@ [vec $cmplx 2] $val]
