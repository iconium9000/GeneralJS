0 or  $c $a $b    :: $c = $a | $b
1 xor $c $a $b    :: $c = xor($a,$b)
2 and $c $a $b    :: $c = $a & $b
3 nor $c $a $b    :: $c = !($a | $b)
4 srl $c $a s     :: $c = $a >> s
5 sra $c $a s     :: $c = $a >>> s
6 sll $c $a s     :: $c = $a << s
7 add $c $a $b    :: $c = $a + $b
8 sub $c $a $b    :: $c = $a - $b
9 orlo $c $imm    :: $c = $c | $imm(lo8)
a orhi $c $imm    :: $c = $c | $imm(hi8)
b addi $c $imm    :: $c = $c + $imm(lo8)
c gtr $c $a $b    :: $c = $a > $b ? 0 : 1
d ifz $c $a $b    :: $c = $b==0 ? $a : $c
e rd $c $b $a     :: $c = mem[$b] = mem[$a]
f wt $c $b $a     :: mem[$c] = mem[$b] = $a

$0 zero           :: always 0
$1 $t1            :: temp1
$2 $t2            :: temp2
$3 $t3            :: temp3
$4 $s0            :: var0
$5 $s1            :: var1
$6 $s2            :: var2
$7 $s3            :: var3
$8 $r0            :: ret0
$9 $r1            :: ret1
$A $a0            :: arg0
$B $a1            :: arg1
$C $a2            :: arg2
$D $sp            :: stack pointer
$E $ra            :: return address
$F $pc            :: program counter

*$r = $v
[0]               :: nop
[1]               :: sleep($r)
[2 $a]            :: wake($a)
[3 $b $a]         :: call($b,$a)
[4 $b $a]         :: call($b,*$a)
[5 $b $a]         :: *$b = $a
[6 $b $a]         :: *$b = *$a
[7 $f]            :: f($r,*$r)
[8 $f $c $a $b]   :: call($c,f(*$a,*$b))
[9]               :: stop
