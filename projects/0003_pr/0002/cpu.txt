or  $c $a $b    :: $c = $a | $b
xor $c $a $b    :: $c = xor($a,$b)
and $c $a $b    :: $c = $a & $b
nor $c $a $b    :: $c = !($a | $b)
srl $c $a s     :: $c = $a >> s
sra $c $a s     :: $c = $a >>> s
sll $c $a s     :: $c = $a << s
add $c $a $b    :: $c = $a + $b
sub $c $a $b    :: $c = $a - $b
orlo $c $imm    :: $c = $c | $imm(lo8)
orhi $c $imm    :: $c = $c | $imm(hi8)
addi $c $imm    :: $c = $c + $imm(lo8)
gtr $c $a $b    :: $c = $a > $b ? 0 : 1
ifz $c $a $b    :: $c = $b==0 ? $a : $c
rd $c $b $a     :: $c = mem[$b] = mem[$a]
wt $c $b $a     :: mem[$c] = mem[$b] = $a

$0 zero           :: always 0
$1 $t1            :: temp1
$2 $t2            :: temp2
$3 $t3            :: temp3
$4 $s0            :: var0
$5 $s1            :: var1
$6 $s2            :: var2
$7 $s3            :: var3
$8 $r0            :: ret0
$9 $r1            :: ret1
$A $a0            :: arg0
$B $a1            :: arg1
$C $sp            :: stack pointer
$D $ra            :: return address
$E $pc            :: program counter
$F $ni            :: next instruction
