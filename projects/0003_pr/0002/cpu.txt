0 or  c a b    :: c = a | b
1 xor c a b    :: c = xor(a,b)
2 and c a b    :: c = a & b
3 nor c a b    :: c = !(a | b)
4 srl c a s     :: c = a >>> s
5 sra c a s     :: c = a >> s
6 sll c a s     :: c = a << s
7 add c a b    :: c = a + b
8 sub c a b    :: c = a - b
9 orlo c imm    :: c = c | imm(lo8)
a orhi c imm    :: c = c | imm(hi8)
b addi c imm    :: c = c + imm(lo8)
c gtr c a b    :: c = a > b ? 0 : 1
d ifz c a b    :: c = *b==0 ? a : c
e rd c a b     :: c = *(a + b)
f wt c a b     :: *(a + b) = c

0 z             :: always 0
1 t0            :: temp1
2 t1            :: temp2
3 t2            :: temp3
4 s0            :: var0
5 s1            :: var1
6 s2            :: var2
7 s3            :: var3
8 r0            :: ret0
9 r1            :: ret1
A a0            :: arg0
B a1            :: arg1
C at            :: arg2
D sp            :: stack pointer
E ra            :: return address
F pc            :: program counter

[0]       :: nop
[1 b a]   :: *b = a
[2 b a]   :: *b = *a
[3]       :: pause


0 or  c a b    :: c = a | b
1 xor c a b    :: c = xor(a,b)
2 and c a b    :: c = a & b
3 nor c a b    :: c = !(a | b)
4 add c a b    :: c = a + b
5 sub c a b    :: c = a - b
6 slt c a b    :: c = a < b ? 1 : 0
7 addi c imm    :: c = c + imm(lo8)
8 orlo c imm    :: c = c | imm(lo8)
9 orhi c imm    :: c = c | imm(hi8)
a srl c a s     :: c = a >>> s
b sra c a s     :: c = a >> s
c sll c a s     :: c = a << s
d ifz c a b    :: c = *b==0 ? a : c
e rd c a b     :: c = *(a + b)
f wt c a b     :: *(a + b) = c
